1)Abstraction:


package com.abstraction; 
public abstract class MyTest 
{ 
  abstract void calculate(int a, int b); // No body. 
 } 
public class Addition extends MyTest 
{ 
  void calculate(int a, int b)
  { 
    int x = a + b; 
    System.out.println(“Sum: ” +x); 
   } 
} 
public class Subtraction extends MyTest 
{ 
  void calculate(int a, int b)
  { 
    int y = a - b; 
    System.out.println(“Subtract: ” +y); 
  } 
} 
public class Multiplication extends MyTest 
{ 
  void calculate(int a, int b)
  { 
    int z = a * b; 
    System.out.println(“Multiply: ” +z); 
  } 
} 
public class MyClass 
{ 
 public static void main(String[] args) 
 { 
   Addition a = new Addition(); 
   Subtraction s = new Subtraction(); 
   Multiplication m = new Multiplication(); 
    
    a.calculate(20, 30); 
    s.calculate(10, 5); 
    m.calculate(10, 20); 
  } 
}

2)Exception handling:


import java.io.*;
 

class practice {

    public static void main (String[] args) {

      int a=20;

      int b=0;

        try{

          System.out.println(a/b);

        }

      catch(ArithmeticException e){

        e.printStackTrace();

      }

    }
}

Polymorphism:

class Overload
{
    void demo (int a)
    {
       System.out.println ("a: " + a);
    }
    void demo (int a, int b)
    {
       System.out.println ("a and b: " + a + "," + b);
    }
    double demo(double a) {
       System.out.println("double a: " + a);
       return a*a;
    }
}
class MethodOverloading
{
    public static void main (String args [])
    {
        Overload Obj = new Overload();
        double result;
        Obj .demo(10);
        Obj .demo(10, 20);
        result = Obj .demo(5.5);
        System.out.println("O/P : " + result);
    }
}


3)Inheritance:

class A 
{ 
 int a, b; 
 void display() 
 { 
 System.out.println(“Inside class A values =”+a+” ”+b); 
 } 
} 
class B extends A 
{ 
 int c; 
 void show() 
 { 
 System.out.println(“Inside Class B values=”+a+” “+b+” “+c);  } 
} 
class singleInheritance 
{ 
 public static void main(String args[]) 
{ 
 B obj = new B(); //derived class object 
 obj.a=10; 
 obj.b=20; 
 obj.c=30; 
 obj.display(); 
 obj.show(); 
 } 
}

4) Encapsulation


class Area {

  int length;
  int breadth;


  Area(int length, int breadth) {
    this.length = length;
    this.breadth = breadth;
  }

  
  public void getArea() {
    int area = length * breadth;
    System.out.println("Area: " + area);
  }
}

class Main {
  public static void main(String[] args) {

    // create object of Area
    // pass value of length and breadth
    Area rectangle = new Area(5, 6);
    rectangle.getArea();
  }
}
